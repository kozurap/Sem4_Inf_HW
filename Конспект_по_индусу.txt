MVC
Расшифровывается как Model-View-Controller

MVC это архитектурный паттерн. То есть, это не язык программирования, это не фреймворк, MVC - это архитектурный
паттерн

Когда мы говорим "Архитектурный паттерн" это значит что паттерн используется на архитектурном уровне of 
applikason

Model, view и controller это главные копмоненты MVC

Model = data
View = UI
Controller = обрабатывает инпут
Дальше мне стало в падлу конспектировать то, что я сдавал на зачете в прошлом семестре

ASP.NET Core Middleware
ПО промежуточного слоя — это программное обеспечение, выстраиваемое в виде конвейера приложения для обработки запросов и откликов. Каждый компонент:
определяет, нужно ли передать запрос следующему компоненту в конвейере;
может выполнять работу как до, так и после вызова следующего компонента в конвейере.
Для построения конвейера запросов используются делегаты запроса. Они обрабатывают каждый HTTP-запрос.

Создание конвейера ПО промежуточного слоя с помощью IApplicationBuilder
Конвейер запросов ASP.NET Core состоит из последовательности делегатов запроса, вызываемых один за другим. 
На следующей схеме демонстрируется этот принцип. Поток выполнения показан черными стрелками.

Простейшее приложение ASP.NET Core задает один делегат запроса, обрабатывающий все запросы. 
В этом случае конвейер запросов как таковой отсутствует. 
Вместо этого в ответ на каждый HTTP-запрос вызывается одна анонимная функция.

Несколько делегатов запроса можно соединить в цепочку с помощью Use. 
Параметр next представляет следующий делегат в конвейере. 

Делегаты Run не получают параметр next. Первый делегат Run всегда является конечным и завершает конвейер

Метод Startup.Configure добавляет компоненты ПО промежуточного слоя для распространенных сценариев приложений:
Обработка исключений/ошибок
Когда приложение выполняется в среде разработки:
ПО промежуточного слоя страницы исключений для разработчика (UseDeveloperExceptionPage) сообщает об ошибках среды выполнения приложения.
ПО промежуточного слоя страницы исключений для базы данных сообщает об ошибках среды выполнения базы данных.
Когда приложение выполняется в рабочей среде:
ПО промежуточного слоя обработчика исключений (UseExceptionHandler) перехватывает исключения, возникшие в указанном ниже ПО промежуточного слоя.
ПО промежуточного слоя протокола HTTP Strict Transport Security Protocol (HSTS) (UseHsts) добавляет заголовок Strict-Transport-Security.
ПО промежуточного слоя перенаправления HTTPS (UseHttpsRedirection) перенаправляет запросы с HTTP на HTTPS.
ПО промежуточного слоя статических файлов (UseStaticFiles) возвращает статические файлы и сокращает дальнейшую обработку запросов.
ПО промежуточного слоя политики файлов Cookie (UseCookiePolicy) обеспечивает соответствие приложения нормам Общего регламента по защите данных (GDPR) ЕС.
ПО промежуточного слоя маршрутизации (UseRouting) для маршрутизации запросов.
ПО промежуточного слоя проверки подлинности (UseAuthentication) пытается проверить подлинность пользователя, прежде чем предоставить ему доступ к защищенным ресурсам.
ПО промежуточного слоя авторизации (UseAuthorization) разрешает пользователю доступ к защищенным ресурсам.
ПО промежуточного слоя сеанса (UseSession) устанавливает и поддерживает состояние сеанса. Если в приложении используется состояние сеанса, вызовите ПО промежуточного слоя сеанса после ПО промежуточного слоя политики файлов Cookie и до ПО промежуточного слоя MVC.
ПО промежуточного слоя маршрутизации конечных точек (UseEndpoints с MapRazorPages) для добавления конечных точек Razor Pages в конвейер запросов.

Хост инкапсулирует ресурсы приложения

Чтобы сконвертировать консольное приложение в веб апп, надо в csproj после Sdk написать .Web, Намутить HostBuilder и запустить метод которые его создает в мейне, а еще создать стартап

В launchSettings.json есть профили, а в них еще и Environment variables есть, фантастика
